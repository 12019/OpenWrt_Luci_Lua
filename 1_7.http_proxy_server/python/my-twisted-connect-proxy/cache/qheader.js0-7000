(function(o){
if(!o || o.QHeader){ return; }

//global domain
document.domain = 'youku.com';

//define variable
var toDomain = function(s){ s = s.replace('http://', ''); if(s[s.length -1] == '/'){ s = s.substr(0, s.length-1); }; return s; }
var DOMAIN_NC = toDomain(nc_domain)
	,DOMAIN_NOTICE = toDomain(notice_domain)
	,LOADING = '<img src="http://static.youku.com/index/img/2013/loading_16.gif" width="16" height="16" border="0">'
	,isIE6 = document.all && !window.XMLHttpRequest ? true : false;

//header class
var QHeader = {
	ids: {'headerbox': 'qheader_box', 'header': 'qheader'},
	dropmenuGroup: null,
	node: null,
	jsres: typeof(qheaderjs) == 'object' ? qheaderjs : null,
	ready: false,
	status: 'static',
	rule: '',//取消顶导fixed
	init: function(){
		this.header = document.getElementById(this.ids.header);
		this.headerbox = document.getElementById(this.ids.headerbox);
		if(!this.header){ return; }
		//优先执行的功能不依赖资源加载
		this.Nav.findStick();//导航替换
		this.Search.init();//搜索功能
		//登录状态 common.js ready
		if(typeof(islogin) == 'function' && !islogin()){
			document.getElementById('qheader_logbefore').style.display = 'block';
		}
		this.bind();
		//依赖打印代码中的资源声明打印
		if(!this.jsres){ return; }
		var _this = this, canrun = false, runed = false;

		//运行时检测依赖脚本, 如加载立即运行
		var timer = setInterval(function(){
			if(_this.chkres('relyon')){
				canrun = true;
				clearInterval(timer);
				if(!runed){
					_this.bindfns(); runed = true;
				}
			}
		}, 10);

		//domready后检测依赖脚本, 添加未包含的脚本, 并加载附加功能
		domReady(function(){
			clearInterval(timer); timer = null;
			canrun = canrun || _this.chkres('relyon');

			var addons = function(){
				_this.chkres('addons');
				_this.loadres('addons', function(){
					if(typeof(XBox) != 'undefined'){
						XBox.init({"site":14});

						var f = document.getElementById('qheader_search');
						if(f){
							var b = f.getElementsByTagName('button')[0];
							if(b){
								addEvent(b, 'click', function(){
									_this.Search.doSearch();
								});
							}
						}
					}
				});
			}

			if(!canrun){
				_this.loadres('relyon', function(){
					var relyon = _this.jsres.relyon;
					for(var i=0; i<relyon.length; i++){
						if(relyon[i].ready !== true){ return; }
					}
					if(!runed){ _this.bindfns(); runed = true;}
					addons();
				});
			}else{
				if(!runed){ _this.bindfns(); runed = true; }
				addons();
			}
		});
	},
	bind: function(){
		var _this = this;
		addEvent(window, 'scroll', function(){
			if(_this.rule == 'fixed'){
				_this.changePos('scroll');
			}
		});
	},
	bindfns: function(){
		this.ready = true;
		this.dropmenuGroup = new DropmenuGroup();
		this.Userlog.init();
		this.Channel.init();
		this.Nav.init();
		this.Upload.init();
		this.NoticeNew.init();
	},
	dofix: function(){
		return this.changeRule('fixed');
	},
	unfix: function(){
		return this.changeRule('static');
	},
	changeRule: function(rule){
		if(rule != this.rule){
			this.rule = rule;
			this.changePos('rule');
		}
		return this;
	},
	changePos: function(type){
		var ready = typeof(Element) == 'function' ? true : false;//prototype ready
		var fixpos = false, inview = true;
		var scrolltop = document.documentElement.scrollTop || document.body.scrollTop;
		var posheader = getElementPos(this.header);

		if(scrolltop >= this.header.offsetHeight + posheader.y){ inview = false; }
		if(scrolltop >= posheader.y){ fixpos = true; }

		var _this = this
			,header = ready ? Element.extend(this.header) : this.header
			,headerbox = ready ? Element.extend(this.headerbox) : this.headerbox;

		if(this.rule == 'fixed'){
			if(fixpos){
				if(this.status != 'fixed'){
					if(!isIE6){ headerbox.style.position = 'fixed'; }
					this.status = 'fixed';
				}
			}else{
				if(this.status != 'static'){
					if(!isIE6){ headerbox.style.position = 'relative'; }
					this.status = 'static';
				}
			}
		}else{
			if(this.status != 'static'){
				if(!isIE6){ headerbox.style.position = 'relative'; }
				this.status = 'static';
			}
		}

		return this;
	},
	loadres: function(key, callback){
		var res = this.jsres[key];
		var _this = this;
		var callback = typeof(callback) == 'function' ? callback : function(){};
		for(var i=0; i<res.length; i++){
			(function(i){
				if(res[i].ready === false){
					_this.jsres[key][i].ready = 'loading';
					addScript(_this.jsres[key][i].src, function(){
						_this.jsres[key][i].ready = true;
						callback();
					});
				}
			})(i);
		}
	},
	chkres: function(key){//同步加载状态下 检测依赖的JS资源
		var res = this.jsres[key];
		if(!res){ return true; }
		var _this = this;
		var scripts = document.getElementsByTagName('script');
		for(var i=0; i<scripts.length; i++){
			var script = scripts[i];
			for(var j=0; j<res.length; j++){
				if(script.src && script.src == res[j].src){

					(function(script, key, j){
						if(!_this.jsres[key][j].ready && eval(_this.jsres[key][j].condition)){
							_this.jsres[key][j].ready = true;
						}
					})(script, key, j);
				}
			}
		}
		for(var i=0; i<this.jsres[key].length; i++){
			if(this.jsres[key][i].ready !== true){
				return false;
			}
		}
		return true;
	}
}

QHeader.Userlog = {
	uid: 0,
	lock: false,
	first: true,
	init: function(){
		this.logbefore = $('qheader_logbefore');
		this.logafter = $('qheader_logafter');
		if(!this.logbefore || !this.logafter){ return; }
		var node =  $('qheader_username');;
		if(!node){ return; }

		this.dp = new Dropmenu({
			'group': QHeader.dropmenuGroup,
			'node': node,
			'fire': 'hover'
		});
		this.dp.setCallback('show', function(){
			QheaderModule.showUserMsg();
		});
		this.update();
		this.bind();
		QheaderModule.noticePoll();
	},
	bind: function(){
		var _this = this;
		$('qheader_login').observe('click', function(e){
			login({type:'header', callBack:''}); preventDefault(e);
		});
		window['update_login_status_hook_qheader'] = function(){
			var uid = _this.getUID();
			if(_this.uid != uid){//第一次header自身获取信息， 其他区域登录且更换账号再次获取
				_this.update();
			}
		}
	},
	getLogStatus: function(){
		if(islogin()){ return true; }
		return false;
	},
	update: function(){
		var st = this.getLogStatus();
		this.uid = this.getUID();
		this.username = this.getUserName();
		if(st){
			this.logbefore.hide();
			this.logafter.show();
			this.getUserinfo();
		}else{
			this.logbefore.show();
			this.logafter.hide();
			this.uid = 0;
		}
		return this;
	},
	getUserinfo: function(){
		if(this.lock){ return; }
		this.lock = true;
		if(this.username){
			$('qheader_username_show').update('<div style="text-align:center;margin-top:5px;">'+ LOADING +'</div>');
		}
		QheaderModule.initHeaderUser();
	},
	getUID: function(){
		if(!islogin()){ return 0; }
		var ckie = Nova.Cookie.get('yktk');
		var uid = 0;
		if(ckie){
			try{
				var u_info = decode64(decodeURIComponent(ckie).split(